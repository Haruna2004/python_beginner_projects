import re 
import random
#lets create a board to represent the minesweeper game
#this is so that we can just say "create a new object ", or 
#dig here or "render this game for this object"
class Board:
    def __init__(self,dim_size,num_bombs):
        #lets keep track of this parameter they will be helpful later
        self.dim_size = dim_size
        self.num_bombs = num_bombs

        #lets create the board
        #make use of an helper function!
        self.board = self.make_new_board() #plant the bombs
        self.assign_values_to_board()
        
        #initialize a set to keep track of which location we have uncovered
        #we'll save (row,col) tuples into this set
        self.dug = set() #if we dig at 0,0 , then self.dug = {(0,0)}


    def make_new_board(self):
            #construct a new board base on the dim size and num_bombss

            #generate a new board
            board = [[None for _ in range(self.dim_size)] for _ in range(self.dim_size)]
            
            #plant the bombs
            bombs_planted = 0
            while bombs_planted < self.num_bombs:
                loc = random.randint(0,self.dim_size**2 - 1)
                row = loc // self.dim_size 
                col = loc % self.dim_size
                if board[row][col] == '*':
                    #this means we have already planted a bomb there already so keep going
                    continue
                board[row][col] = '*' #plant the bomb
                bombs_planted += 1

            return board
    def assign_values_to_board(self):
        #represents how many niegbouring bombs they are
        for r in range(self.dim_size):
            for c in range(self.dim_size):
                if self.board[r][c] == '*':
                    #if this is already a bomb we don't want to calculate anything
                     continue
                self.board[r][c] = self.get_num_neighboring_bombs(r,c)

    def get_num_neighboring_bombs(self,row,col):
            #make sure to not go out of bound
            num_neighbouring_bombs = 0
            for r in range(max(0,row - 1),min(self.dim_size-1,row+1) + 1):
                for c in range(max(0,col - 1),min(self.dim_size-1,col + 1) + 1):
                    if r == row and c == col:
                        #our original position, Don't check
                        continue
                    if self.board[r][c] == '*':
                        num_neighbouring_bombs += 1

            return num_neighbouring_bombs

    def dig(self,row,col): 
        #dig at the location
        #return true if success ful and falsef if bomb dug
        #a few senieros:
        #hit  a bomb --> game over
        #dig a location with neiboring bomb -- finish dig
        #dig at location with no neighbouring bombs -- recursively dig neighbour

        self.dug.add((row,col))#keep track that we dug

        if self.board[row][col] == '*':
            return False
        elif self.board[row][col] > 0:
            return True
        
        #self.board[row][col] = 0
        for r in range(max(0,row - 1),min(self.dim_size-1,row+1) + 1):
            for c in range(max(0,col - 1),min(self.dim_size-1,col + 1) + 1):
                if (r,c) in self.dug:
                    continue #don't dig where you have already dug
                self.dig(r,c)
        #if our initial dig didn't hit a bomb, we shouldn't hit a bomb here 
        return True

    def __str__(self):
        #first let's create  a new array that represents what the player would see
        visible_board = [[None for _ in range(self.dim_size)] for _ in range(self.dim_size)]
        for row in range(self.dim_size):
            for col in range(self.dim_size):
                if (row,col) in self.dug:
                    visible_board[row][col] = str(self.board[row][col])
                else:
                    visible_board[row][col] = ' '
        #put this together in string
        string_rep = ''
        #get max column width for printing 
        widths = []
        for idx in range(self.dim_size):
                columns = map(lambda x: x[idx], visible_board)
                widths.append(
                    len(
                        max(columns, key = len)
                    )
                )
        #print the csv strings 
        indices = [i for i in range(self.dim_size)]
        indices_row = '   '
        cells = []
        for idx,col in enumerate(indices):
            format = '%-' + str(widths[idx]) + 's'
            cells.append(format % (col))
        indices_row += '  '.join(cells)
        indices_row += '  \n'
        for i in range(len(visible_board)):
            row = visible_board[i]
            string_rep += f'{i} |'
            cells = []
            for idx,col in enumerate(row):
                format = '%-' + str(widths[idx]) + "s"
                cells.append(format % (col))
            string_rep += ' |'.join(cells)
            string_rep += ' |\n'
        str_len = int(len(string_rep) / self.dim_size)
        string_rep = indices_row + '-'*str_len + '\n' + string_rep + '-'*str_len

        return string_rep

def play(dim_size=10,num_bombs=10):
    #step1: create the board and plant the bombs
    board = Board(dim_size, num_bombs)
    #step2: show the user the board and ask where they want to dig

    #step3a: if the location is bomb, show game over message
    #step3b: if location is not a bomb, dig recursively until each square is atleat 
    #       next to a bomb
    #step4: repeat step 2 and 3a/b until there are no more places to dig --> Victory
    safe = True
    while len(board.dug) < board.dim_size**2 - num_bombs:
        print(board)
        user_input = re.split(',(\\s)*',input("Where do you want to dig? Input as row,col: "))
        row, col = int(user_input[0]), int(user_input[-1])
        if row < 0 or row >= board.dim_size or col < 0 or col >= dim_size:
            print("Invalid location, Try again.")
            continue
        #if it's valid, we dig.
        safe = board.dig(row,col)
        if not safe:
            #dug a bomb ahhhhh
            break #(game over rip)
    
    #2 ways to end the loop, lets check which one
    if safe:
        print("CONGRATULATION!!!! YOU ARE VICTORIOUS")
    else:
        print("SORRY GAME OVER :(")
        #lets reveal the whole board
        board.dug = [(r,c) for r in range(board.dim_size) for c in range(board.dim_size)]
        print(board)

if __name__ == '__main__': #good practice :)
    play()

    

